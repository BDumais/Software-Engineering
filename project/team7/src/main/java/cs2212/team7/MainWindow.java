/**
 * MainWindow class, The GUI for the application
 * @author Team7
 */
/*
 *The following GUI was developed with NetBeans GUI helper, and as such
 * most of the code was generated by the IDE. This code does, however, contain
 * code written by our team (namely action events)
 */

package cs2212.team7;

//Imports
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;

public class MainWindow extends javax.swing.JFrame implements ActionListener{

    //Attributes
    private final App app;                  //Reference to the running App
    private final static int FIRST = 0;     //Constant for first row of table
    private final static int UNENROLL = 0;  //Constant for unenroll option
    private final static int REMOVE = 1;    //Constant for removal option
    private final static int OKAY = 0;      //Constant for okay option
    private final static int CREATE = 0;    //Constant for create option
    private final static int ADD = 1;       //Constant for add option

    /* Constructor */
    public MainWindow(final App app) {
        this.app = app; //Set the app reference
        Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){ //Create new shutdown action
            @Override
            public void run(){  //Run this when program is exiting
                try {
                    if(active()){ //If there is an active course
                        System.out.println("\nSaving active Course..."); //Print a message that the program is saving data
                        app.saveActiveCourse(); //Save the course data
                        System.out.println("Done, exiting...\n");
                    }
                    else{
                        System.out.println("\nNo Active course to save, exiting...\n");
                    }
                } catch (GradebookException ex) { //If error is thrown, print an error message
                    System.err.println("\n**Error occured when saving course, data was not saved!**\n");
                }
            }
        }));
        initComponents(); //Initialize all components
        refreshCourseSelector(); //Build the course selector
        openFirstCourse();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        courseLabel = new javax.swing.JLabel();
        courseSelector = new javax.swing.JComboBox();
        btnEditCourse = new javax.swing.JButton();
        tableScroller = new javax.swing.JScrollPane();
        gradeTable = new javax.swing.JTable();
        activeCourseHeader = new javax.swing.JLabel();
        editingPanel = new javax.swing.JPanel();
        btnEditStudent = new javax.swing.JButton();
        btnUnenrollStudent = new javax.swing.JButton();
        btnEditDel = new javax.swing.JButton();
        btnRemDel = new javax.swing.JButton();
        btnEnrollStudent = new javax.swing.JButton();
        btnAddDel = new javax.swing.JButton();
        impExpPanel = new javax.swing.JPanel();
        btnImpGrades = new javax.swing.JButton();
        btnExpGrades = new javax.swing.JButton();
        btnImpStudents = new javax.swing.JButton();
        btnExpStudent = new javax.swing.JButton();
        btnOpenCourse = new javax.swing.JButton();
        btnRemActCourse = new javax.swing.JButton();
        managementPanel = new javax.swing.JPanel();
        btnManageDB = new javax.swing.JButton();
        messageBox = new javax.swing.JLabel();
        messagesLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Team7 Gradebook");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        courseLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        courseLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        courseLabel.setLabelFor(courseSelector);
        courseLabel.setText("Courses");

        courseSelector.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Create New...", " " }));

        btnEditCourse.setText("Edit Course");
        btnEditCourse.addActionListener(this);

        gradeTable.setAutoCreateRowSorter(true);
        gradeTable.setModel(new GradesTableModel());
        gradeTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        gradeTable.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), "startEditing");
        tableScroller.setViewportView(gradeTable);

        activeCourseHeader.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        activeCourseHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        activeCourseHeader.setText("ACTIVE COURSE INFO GOES HERE");

        editingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Editing"));

        btnEditStudent.setText("Edit Selected Student");
        btnEditStudent.addActionListener(this);

        btnUnenrollStudent.setText("Unenroll Selected Student");
        btnUnenrollStudent.addActionListener(this);

        btnEditDel.setText("Edit Selected Deliverable");
        btnEditDel.addActionListener(this);

        btnRemDel.setText("Delete Selected Deliverable");
        btnRemDel.addActionListener(this);

        btnEnrollStudent.setText("Enroll Student");
        btnEnrollStudent.addActionListener(this);

        btnAddDel.setText("Create New Deliverable");
        btnAddDel.addActionListener(this);

        javax.swing.GroupLayout editingPanelLayout = new javax.swing.GroupLayout(editingPanel);
        editingPanel.setLayout(editingPanelLayout);
        editingPanelLayout.setHorizontalGroup(
                editingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(editingPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(editingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(btnEditStudent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnUnenrollStudent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnEditDel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnRemDel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnEnrollStudent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnAddDel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );
        editingPanelLayout.setVerticalGroup(
                editingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(editingPanelLayout.createSequentialGroup()
                                .addComponent(btnEnrollStudent)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnEditStudent)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUnenrollStudent)
                                .addGap(18, 18, 18)
                                .addComponent(btnAddDel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnEditDel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRemDel)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        impExpPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Import/Export"));

        btnImpGrades.setText("Import Grades");
        btnImpGrades.addActionListener(this);

        btnExpGrades.setText("Export Grades");
        btnExpGrades.addActionListener(this);

        btnImpStudents.setText("Import Students");
        btnImpStudents.addActionListener(this);

        btnExpStudent.setText("Export Students");
        btnExpStudent.addActionListener(this);

        javax.swing.GroupLayout impExpPanelLayout = new javax.swing.GroupLayout(impExpPanel);
        impExpPanel.setLayout(impExpPanelLayout);
        impExpPanelLayout.setHorizontalGroup(
                impExpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(impExpPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(impExpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(btnImpGrades, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnExpGrades, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnImpStudents, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                                        .addComponent(btnExpStudent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );
        impExpPanelLayout.setVerticalGroup(
                impExpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(impExpPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(btnImpStudents)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnImpGrades)
                                .addGap(18, 18, 18)
                                .addComponent(btnExpGrades)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                                .addComponent(btnExpStudent)
                                .addContainerGap())
        );

        btnOpenCourse.setText("Open Course");
        btnOpenCourse.addActionListener(this);

        btnRemActCourse.setText("Remove Course");
        btnRemActCourse.addActionListener(this);

        managementPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Management"));

        btnManageDB.setText("Manage Databases");
        btnManageDB.addActionListener(this);

        javax.swing.GroupLayout managementPanelLayout = new javax.swing.GroupLayout(managementPanel);
        managementPanel.setLayout(managementPanelLayout);
        managementPanelLayout.setHorizontalGroup(
                managementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(managementPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(btnManageDB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );
        managementPanelLayout.setVerticalGroup(
                managementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(managementPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(btnManageDB)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        messageBox.setText("No Messages");

        messagesLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        messagesLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        messagesLabel.setText("Messages:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(courseSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(btnOpenCourse)
                                                                .addGap(0, 0, Short.MAX_VALUE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(courseLabel)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(activeCourseHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                                .addGap(18, 18, 18))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(tableScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 905, Short.MAX_VALUE)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(messagesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(messageBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(editingPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(impExpPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(managementPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(btnEditCourse)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnRemActCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(activeCourseHeader)
                                                .addComponent(btnEditCourse)
                                                .addComponent(btnRemActCourse))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(courseLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(courseSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(btnOpenCourse))))
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(editingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(managementPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(impExpPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addComponent(tableScroller))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(messageBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(messagesLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel activeCourseHeader;
    private javax.swing.JButton btnAddDel;
    private javax.swing.JButton btnEditCourse;
    private javax.swing.JButton btnEditDel;
    private javax.swing.JButton btnEditStudent;
    private javax.swing.JButton btnEnrollStudent;
    private javax.swing.JButton btnExpGrades;
    private javax.swing.JButton btnExpStudent;
    private javax.swing.JButton btnImpGrades;
    private javax.swing.JButton btnImpStudents;
    private javax.swing.JButton btnManageDB;
    private javax.swing.JButton btnOpenCourse;
    private javax.swing.JButton btnRemActCourse;
    private javax.swing.JButton btnRemDel;
    private javax.swing.JButton btnUnenrollStudent;
    private javax.swing.JLabel courseLabel;
    private javax.swing.JComboBox courseSelector;
    private javax.swing.JPanel editingPanel;
    private javax.swing.JTable gradeTable;
    private javax.swing.JPanel impExpPanel;
    private javax.swing.JPanel managementPanel;
    private javax.swing.JLabel messageBox;
    private javax.swing.JLabel messagesLabel;
    private javax.swing.JScrollPane tableScroller;
    // End of variables declaration//GEN-END:variables


    /**
     * Method to handle button clicks and perform appropriate action
     *  Checks the source of the event (which button) and then updates accordingly
     *
     * @param e The event trigger
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        try{
            //REMOVE COURSE
            if(e.getSource() == btnRemActCourse){
                //If there is an active course and create new option isnt selected, proceed
                if(active() && courseSelector.getSelectedItem() != "Create New..."){
                    app.deleteActiveCourse();   //Remove the active course
                    refreshCourseSelector();    //Refresh course selector
                    openFirstCourse();
                    messageBox.setText("Course removed successfully");
                }
                //Otherwise print a message
                else{
                    messageBox.setText("No active course to remove, please select a course");
                }
            }

            //OPEN COURSE
            else if(e.getSource() == btnOpenCourse){

                //CREATE NEW COURSE OPTION SELECTED
                if(courseSelector.getSelectedItem() == "Create New..."){
                    app.addNewCourse();     //Create new course
                    refreshCourseSelector();//Refresh selector
                    messageBox.setText("Course added successfully");
                }

                //OPEN EXISTING COURSE
                else{
                    app.openCourse((String)courseSelector.getSelectedItem());   //Set active to the selected course
                    updatedActiveCourse();      //Update active course
                    messageBox.setText("Active course changed to " + app.getActiveCourse().getCode());
                }
            }

            //EDIT COURSE
            else if(e.getSource() == btnEditCourse){
                if(active()){
                    app.editCourse();   //Edit active course
                    Course c = app.getActiveCourse(); //Get active course
                    activeCourseHeader.setText(c.getName() + ", " + c.getTerm() + " - " + c.getCode()); //Update banner
                    refreshCourseSelector(); //Refresh course selector
                    messageBox.setText("Course edited successfully");
                }
                else
                    messageBox.setText("No active course to edit, please select a course");
            }

            //ADD DELIVERABLE
            else if(e.getSource() == btnAddDel){
                //If there is an active course and there are students
                if(active()){
                    if(!app.getActiveCourse().getStudents().isEmpty()){
                        app.addNewDeliverable(); //Create new deliverable
                        GradesTableModel mdl = (GradesTableModel)gradeTable.getModel(); //Get table model
                        rebuildTable();
                        messageBox.setText("Deliverable added successfully");
                    }
                    else
                        messageBox.setText("Unable to add Deliverable to empty course, please add a student first");
                }
                else
                    messageBox.setText("No Active course selected, please select a course");
            }

            //EDIT DELIVERABLE
            else if(e.getSource() == btnEditDel){
                GradesTableModel mdl = (GradesTableModel)gradeTable.getModel(); //Get table model
                int c = gradeTable.getSelectedColumn() - 5; //Get selected column

                if(c >= 0){ //if c is in range edit the column
                    Deliverable d = mdl.getRows().get(FIRST).getDeliverables().get(c); //Get corresponding deliverable
                    app.editDeliverable(d); //edit deliverable
                    mdl.fireTableStructureChanged(); //rebuild structure
                    messageBox.setText("Deliverable edited successfully");
                }
                else
                    messageBox.setText("Please select a deliverable to edit");

            }

            //REMOVE DELIVERABLE
            else if(e.getSource() == btnRemDel){

                //Return if theres no active course
                if(!active()){
                    messageBox.setText("No Active course selected, please select a course");
                    return;
                }

                int colSelected = gradeTable.getSelectedColumn() -5;
                if(colSelected >=  0){
                    //Confirm action with user
                    int resp = getDesiredAction("Are you sure you want to delete this Deliverable?", "Delete Deliverable", new String[] {"Confirm", "Cancel"});

                    //If confirmed, continue
                    if(resp == OKAY){
                        GradesTableModel mdl = (GradesTableModel)gradeTable.getModel(); //Get table model
                        Deliverable d = mdl.getRows().get(FIRST).getDeliverables().get(colSelected); //Get deliverable object (model->row list -> first TableRow -> deliverable list for course -> selected Deliverable)
                        app.getActiveCourse().removeDeliverable(d.getName());   //Remove the course
                        rebuildTable();
                        messageBox.setText("Deliverable removed successfully");
                    }
                    else
                        messageBox.setText("No Messages");
                }
                else
                    messageBox.setText("Please select a deliverable to remove");

            }

            //ENROLL STUDENT
            else if(e.getSource() == btnEnrollStudent){
                if(active()){ //If there is an active course proceed

                    //Prompt user for which option they would like
                    int resp = getDesiredAction("Would you like to create a new student or add from database?", "Enroll Student", new String[] {"Create New", "Add from Databse"});

                    //CREATE NEW
                    if(resp == CREATE){

                        GradesTableModel mdl = (GradesTableModel)gradeTable.getModel(); //Get table model
                        Student s = app.addNewStudent();    //Create new student
                        if(s != null){
                            mdl.getRows().add(new TableRow(s, app.getActiveCourse())); //Add to table
                            mdl.fireTableRowsInserted(mdl.getRowCount()-1,mdl.getRowCount()-1); //Refresh table
                            messageBox.setText("New Student added successfully");
                        }
                    }
                    //ADD EXISTING
                    else if(resp == ADD){
                        app.addExistingStudent(); //Call add existing student method
                        rebuildTable(); //rebuild the table (as multiple rows could have been added
                        messageBox.setText("Existing Student(s) added successfully");
                    }
                    else
                        messageBox.setText("No Messages");

                }
                else
                    messageBox.setText("No active Course, please select a course");
            }

            //EDIT STUDENT
            else if(e.getSource() == btnEditStudent){
                GradesTableModel mdl = (GradesTableModel)gradeTable.getModel(); //Get table model
                int r = gradeTable.getSelectedRow(); //Get selected row
                //Make sure a valid row is selected
                if(r >= 0){
                    Student s = mdl.getRows().get(r).getStudent(); //Get student object
                    //Call Edit student method on active course
                    app.editStudent(s);
                    rebuildTable(); //Rebuild table
                    messageBox.setText("Student edited successfully");
                }
                else
                    messageBox.setText("Please select a student to edit");
            }

            //UNENROLL STUDENT
            else if(e.getSource() == btnUnenrollStudent){

                //Return if theres no active course
                if(!active()){
                    messageBox.setText("No Active course selected, please select a course");
                    return;
                }

                int[] rowsSelected = gradeTable.getSelectedRows(); //Get selected rows
                if(rowsSelected.length != 0){ //If there are selcted rows proceed

                    //Prompt user for removal or simple un-enroll
                    int resp = getDesiredAction("Would you like to unenroll or delete students?", "Unenroll Student(s)", new String[] {"Unenroll from course", "Remove from database"});

                    //Get model and create a list for selected students
                    GradesTableModel mdl = (GradesTableModel)gradeTable.getModel(); //Get table model
                    LinkedList<Student> students = new LinkedList<>();

                    //If unenroll was selected
                    if(resp == UNENROLL){

                        //Add all selected students to a list for removal
                        for(int rowSelected : rowsSelected){
                            if(rowSelected >= 0){ //Make sure a valid row is selected
                                Student s = mdl.getRows().get(rowSelected).getStudent();  //Get student object
                                students.add(s); //Add to list
                            }
                        }

                        //Remove from course
                        app.removeStudents(students);

                        //Remove from table
                        mdl.getRows().remove(rowsSelected);  //Remove student from table
                        rebuildTable();
                        messageBox.setText("Student(s) un-enrolled successfully");
                    }

                    //Remove from database was selected
                    else if(resp == REMOVE){

                        for(int rowSelected : rowsSelected){
                            if(rowSelected >= 0){ //Make sure selected row is valid
                                Student s = mdl.getRows().get(rowSelected).getStudent();  //Get student object
                                students.add(s);    //Add to list

                            }
                        }

                        //Remove from course
                        app.removeStudents(students);

                        //Remove from table and rebuild
                        mdl.getRows().remove(rowsSelected);  //Remove student from table
                        rebuildTable();

                        //Remove from database + all other courses
                        for(Student s : students){
                            PersistenceManager.removeStudent(Long.toString(s.getStudentNum()));
                            app.removeFromAllCourses(s.getStudentNum());
                        }

                        messageBox.setText("Student removed from system successfully");

                    }
                    else
                        messageBox.setText("No Messages");
                }
                else
                    messageBox.setText("Please select student(s) to remove");

            }

            //EXPORT GRADES
            else if(e.getSource() == btnExpGrades){
                if(!active()){
                    messageBox.setText("No active course to export from");
                    return;
                }
                try {
                    messageBox.setText("Successfully exported " + Integer.toString(CSVManager.exportGrades(getSelectedStudents(), app.getActiveCourse().getDeliverables(), app.getActiveCourse().getCode())) + " students.");
                } catch (Exception exc) {
                    messageBox.setText("Error encountered when exporting grades");
                }


            }

            //EXPORT STUDENTS
            else if(e.getSource() == btnExpStudent){
                if(active()){ //Make sure there is an active course

                    //Get selected rows from the table
                    int[] rows = gradeTable.getSelectedRows();

                    if(rows.length != 0){ //Check that the user has selected at least one row

                        //Get model and create a list for selected students
                        GradesTableModel mdl = (GradesTableModel)gradeTable.getModel(); //Get table model
                        LinkedList<Student> students = new LinkedList<>();

                        for(int i : rows){ //Loop through selected rows
                            if(i >= 0){ //If index is valid, get student and add to list
                                Student s = mdl.getRows().get(i).getStudent();  //Get student object
                                students.add(s);    //Add to list
                            }
                        }
                        try{ //Exporting
                            app.exportStudents(students); //Export list of selected students
                            messageBox.setText("Student(s) exported successfully"); //Update message box
                        }catch(IOException ex){ //If an error is caught, user cancelled
                            messageBox.setText(ex.getMessage()); //Update message box
                        }

                    }
                    else //If no rows selected, prompt user to select via message box
                        messageBox.setText("Please select student(s) to export");
                }
                else //If no active course, prompt user to select one first
                    messageBox.setText("No Active course selected, please select a course");
            }

            //IMPORT GRADES
            else if(e.getSource() == btnImpGrades){
                if(!active()){
                    messageBox.setText("No active course to import to, please select a course");
                    return;
                }

                app.importGrades();
                rebuildTable();
                messageBox.setText("Grade(s) import completed");
            }

            //IMPORT STUDENTS
            else if(e.getSource() == btnImpStudents){
                //If theres no active course return
                if(!active()){
                    messageBox.setText("No active course to import to, please select a course");
                    return;
                }

                //Call import function from app and rebuild table when done
                app.importStudents();
                rebuildTable();
                messageBox.setText("Student(s) import completed");
            }

            //MANAGE DATABASES
            else if(e.getSource() == btnManageDB){
                if (active()){ //Save active course if any
                    app.saveActiveCourse(); //Save course
                }

                app.databaseManager(); //Open database manager
                refreshCourseSelector(); //refresh selector
                openFirstCourse(); //Open first course in list (as they may have removed their current course
                messageBox.setText("Datbase Management complete, opened default course");
            }
        }
        catch(Exception ex){
            messageBox.setText("An error occured during runtime, please see error report");
            System.err.println("Error Exception caught in Mainwindow:");
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex); }
    }

    /**
     * Private helper method to change active course and refresh table
     */
    private void updatedActiveCourse(){
        //Get new course and update banner
        Course c = app.getActiveCourse();
        if(c != null){
            activeCourseHeader.setText(c.getName() + ", " + c.getTerm() + " - " + c.getCode());
            rebuildTable();
        }
        else{
            gradeTable.setModel(new GradesTableModel());
            activeCourseHeader.setText("NO ACTIVE COURSE SELECTED");
        }
    }
    /**
     * Private method to refresh the course selector
     */
    private void refreshCourseSelector(){
        try {
            courseSelector.removeAllItems();    //Remove all options
            List<String> courses = PersistenceManager.readCourses(); //Get list of all courses in database
            for(String s : courses){    //Loop through list
                courseSelector.addItem(s);  //Add course codes to selector
            }
            courseSelector.addItem("Create New..."); //Add option to create new
        } catch (IOException | ClassNotFoundException ex) { //Catch Exceptions
            messageBox.setText("Unable to read course list");
            courseSelector.addItem("Create New..."); //Add option to create new
        }
    }

    /**
     * Helper method to generate a confirmation pop up
     * @param message Message to be displayed
     * @param title Title of the popup
     * @return value of whether user confirmed action or not
     */
    private int confirmPrompt(String message, String title){
        return JOptionPane.showConfirmDialog(null, message, title, JOptionPane.INFORMATION_MESSAGE);
    }
    /**
     * Helper method to generate a multi-option pop up
     * @param message Message to be displayed
     * @param title title of the pop up
     * @param options array of options to be displayed
     * @return value of which box was selected
     */
    private int getDesiredAction(String message, String title, String[] options){
        return JOptionPane.showOptionDialog(null, message, title, JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);
    }

    /**
     * Method to rebuild the Jtable from scratch
     * This is used when an overhaul of data or the over all structure of the
     * table has been changed, especially when a column is deleted/added
     */
    private void rebuildTable(){

        //Build table data
        Course c = app.getActiveCourse();
        List<Student> studs = c.getStudents();  //Get list of students
        ArrayList<TableRow> newRows = new ArrayList<>();

        for(Student s : studs){                 //Loop through students
            newRows.add(new TableRow(s, c));   //Create a new row with each student
        }

        //Create table model and set as the model of the table
        GradesTableModel tr = new GradesTableModel(newRows);  //create new model
        tr.setColumnCount(c.getDeliverables().size());  //Set number of columns
        gradeTable.setModel(tr);
    }

    /**
     * Method to determine if there is an active course
     * @return boolean result
     */
    private boolean active(){
        return app.getActiveCourse() != null;
    }

    /**
     * Method to default to first course in list
     */
    private void openFirstCourse(){
        //If first item is not create new, open it
        if(!"Create New...".equals((String)courseSelector.getItemAt(FIRST)))
            try {
                Course c = PersistenceManager.readCourse((String)courseSelector.getItemAt(FIRST));
                app.setActiveCourse(c);   //Set active to the selected course
                updatedActiveCourse();
            } catch (GradebookException | IOException | ClassNotFoundException ex) {
                System.err.println("Error opening default course");
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        else{ //Otherwise set it to null
            app.setActiveCourse(null);
            updatedActiveCourse();
        }

    }

    /**
     * Returns a list containing the selected students
     */
    public LinkedList<Student> getSelectedStudents() {
        //Get selected rows from the table
        int[] rows = gradeTable.getSelectedRows();

        LinkedList<Student> students = null;

        if(rows.length != 0) { //Check that the user has selected at least one row

            //Get model and create a list for selected students
            GradesTableModel mdl = (GradesTableModel) gradeTable.getModel(); //Get table model
            students = new LinkedList<>();

            for (int i : rows) { //Loop through selected rows
                if (i >= 0) { //If index is valid, get student and add to list
                    Student s = mdl.getRows().get(i).getStudent();  //Get student object
                    students.add(s);    //Add to list
                }
            }
        }
        return students;
    }
}
